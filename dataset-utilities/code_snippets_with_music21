# User-Guide for music21 library: 
# https://web.mit.edu/music21/doc/usersGuide/usersGuide_99_Table_of_Contents.html
# Install by executing: pip install music21

# %%

import music21 as m21
from music21 import *

def m21_to_MusicXML(music_object):
    GEX = m21.musicxml.m21ToXml.GeneralObjectExporter(music_object)
    out = GEX.parse()  # out is bytes
    outStr = out.decode('utf-8')  # now is string
    return outStr.strip()

def print_musicxml(music_object):
    xml = m21_to_MusicXML(music_object)
    for line in xml.split('\n'):
        print(line)

# %% 
s1 = m21.stream.Stream()
n = m21.note.Note('c4', type='half')

# n.duration.type = 'half'

s1.append(n)

n = m21.note.Note('f4', type='whole')
# n.duration.type = 'eighth'

s1.append(n)

# s1.show('xml')
s1.show()

print(s1)

# %%

# p = m21.pitch.Pitch('D#4')
# GEX = m21.musicxml.m21ToXml.GeneralObjectExporter(p)

GEX = m21.musicxml.m21ToXml.GeneralObjectExporter(s1)
out = GEX.parse()  # out is bytes
outStr = out.decode('utf-8')  # now is string
print(outStr.strip())


# %% Chord made of three defined notes

cMinor = m21.chord.Chord(["C4","G4","E-5"])
cMinor.duration.type = 'half'
cMinor.show()

# %% Chord made of three defined notes

n1 = note.Note('C4')
n2 = note.Note('E4')
n3 = note.Note('A4')

c6 = chord.Chord([n1, n2, n3])

# cMinor = m21.chord.Chord(["C4","G4","E-5"])
# cMinor.duration.type = 'half'
c6.show()

# %%  Multi-voice score

n1 = m21.note.Note('f4')
n1.duration.type = 'half'

n2 = m21.note.Note('c4')

multi = m21.voiceLeading.Verticality({0: n1, 1: n2})

multi.show()

# %%

n1 = m21.note.Note('G4')
n2 = m21.note.Note('G4')
m1 = m21.note.Note('G4')
m2 = m21.note.Note('G3')
vl2 = m21.voiceLeading.VoiceLeadingQuartet(n1, n2, m1, m2)
vl2.antiParallelMotion()
vl2.show()


# %% Example of more complex note structure

verdi = m21.corpus.parse('verdi/laDonnaEMobile')
verdi.id = 'verdi'
verdi.measures(1, 10).show()
# %% 
# verdi.measure(3).parts[1].show('musicxml')

print(m21_to_MusicXML(verdi.measure(3).parts[1]))


# %% M21 -> MusicXML -> M21 by convertor.parse

output = m21_to_MusicXML(verdi.measure(3).parts[1])

ss = m21.converter.parse(output)

ss.show()

# %%

# verdi.measure(3).parts[1].show()
# verdi.measure(3).parts[1][4][0][1].show('text')

verdi_p1 = verdi.parts[1].measures(0,10)

verdi_p1.show()

verdi_p1.pop(verdi_p1.measure(0))

verdi_p1.show()

# %%

verdi.measure(3).parts[1][4][0].append(note.Note('c4', type='half'))
verdi.measure(3).parts[1].show('text')




# %% 

double_note = """
<note>
    <rest />
    <duration>5040</duration>
    <voice>1</voice>
    <type>eighth</type>
</note>
<note default-x="19.09" default-y="-214.8">
    <pitch>
        <step>F</step>
        <octave>2</octave>
    </pitch>
    <duration>15120</duration>
    <voice>2</voice>
    <type>quarter</type>
    <dot />
    <stem>down</stem>
</note>
"""

two_voices = converter.parse(double_note, format='musicxml')

two_voices.show()

# %%

s1 = stream.Stream()
vs1 = voiceLeading.Verticality({0: [note.Note('A4')],
                                1: [note.Note('F2')]})

s1.append(vs1)
s1.show()

# %%

n1 = note.Note('E4')
n2 = note.Note('G4')
m1 = note.Note('B4')
m2 = note.Note('D5')
vl = voiceLeading.VoiceLeadingQuartet(n1, n2, m1, m2)

vl.show('text')

# %%  Example of multiple voices taken from: 
# https://programtalk.com/python-more-examples/music21.stream.Voice/

def generateScore(chords, lengths=None, ts="4/4"):
    """Generates a four-part score from a sequence of chords.

    Soprano and alto parts are displayed on the top (treble) clef, while tenor
    and bass parts are displayed on the bottom (bass) clef, with correct stem
    directions.
    """
    if lengths is None:
        lengths = [1 for _ in chords]
    voices = [stream.Voice([instrument.Piano()]) for _ in range(4)]
    for chord, length in zip(chords, lengths):
        bass, tenor, alto, soprano = [
            note.Note(p, quarterLength=length) for p in chord.pitches
        ]
        bass.addLyric(chord.lyric)
        bass.stemDirection = alto.stemDirection = "down"
        tenor.stemDirection = soprano.stemDirection = "up"
        voices[0].append(soprano)
        voices[1].append(alto)
        voices[2].append(tenor)
        voices[3].append(bass)

    female = stream.Part([clef.TrebleClef(), meter.TimeSignature(ts), voices[0], voices[1]])
    male = stream.Part([clef.BassClef(), meter.TimeSignature(ts), voices[2], voices[3]])
    score = stream.Score([female, male])
    return score

generateScore([chord.Chord(["C4","E4","G4", "C5"]), chord.Chord(["D4", "A4", "D5", "F5"])]).show()

# %% Basic example of using voices in score

voice_1 = stream.Voice([note.Note('G4', type='half')])
voice_2 = stream.Voice([note.Note('C#4', type='eighth')])

k = key.Key('A')

meas = stream.Measure([k, voice_1, voice_2])
meas2 = stream.Measure(note.Note('F4'))

s1 = stream.Part([meas, meas2])
s1.show()

# %% Another example of using voices in score

'G4h + C4h E4q + A4q'
s1 = stream.Stream(note.Note('G4', type='half'))

# s2 = stream.Stream([stream.Voice(note.Note('C4', type='half'))]) #, stream.Voice(note.Note('E4'))])
s2 = m21.chord.Chord(["C4","G4"])
s3 = stream.Stream()

voice1 = stream.Voice([note.Note('G4', type='half'), s2, note.Note('A4')])
voice2 = stream.Voice([note.Rest(type='half'), note.Note('A3')])

ss = stream.Part([stream.Measure([voice1, voice2]), stream.Measure([note.Note('C3')])])
ss.show()

# %% Clef, Gracenote, keySignature, Note, rest, ~~multirest~~

n1 = note.Note('C4')
n2 = note.Note('E4')

c2 = clef.NoClef()

d = note.Note('C4', type='eighth').getGrace()

k = key.Key('C#M')

meas = stream.Measure([k, clef.BassClef(), n1, d, n2])
meas2 = stream.Measure([key.Key('DM'), note.Note('G4', type='half')])
measures = [meas, meas2]

meas3 = stream.Stream([stream.Measure(note.Rest('whole'))  for _ in range(5)])
measures += meas3

str1 = stream.Stream(measures)
str1.show()

# %% Tie, timeSignature

c0 = note.Note('C4')
c0.tie = tie.Tie('start')
# c1 = note.Note('C4')
# c1.tie = tie.Tie('continue')
c2 = note.Note('C4')
c2.tie = tie.Tie('stop')
s = stream.Measure()
# s.append([c0, c1, c2])
#s.append([c0, c2])
meas = stream.Measure([meter.TimeSignature(''), c0, c2])
meas.show()


# %%
import os


# ===============================  MultiMeasureRest  =================================================
# %% Loading score with existing Multirest
path = '../../datasets/in_progress/reverse-converter-TDD/musescore_examples/'

file = os.path.join(path, 'Multirest-trying_with_multirest.musicxml')
# 'Multirest-trying_with_multirest.musicxml'
# 'Multirest-trying_without_multirest.musicxml'

score = m21.converter.parse(file)

for i in range(2):
    score.__delitem__(0)

for i in range(2):
    score.__delitem__(-1)
score[0].show('text')
score[0].show()

# for id, element in enumerate(score[0]):
#     print(id)
#     element.show('text')

score[0][3].__delitem__(1)
score[0][3].show('text')
score[0][2].getSpannedElementIds()

# %%

score_1 = m21.converter.parse(xml)
score_1.show()
score_1.show('text')

# %%

for _ in range(21):
    score[0].__delitem__(3)

score[0].__delitem__(-1)

score[0].__delitem__(1)
score[0].__delitem__(0)
# score[0].show('text')
# score[0].show()
type(score[0])

# %%

mmr = score[0][2]
print(mmr.numRests)
m1 = stream.Measure(note.Rest('whole'), number=28)
mmr.addSpannedElements(m1)


score[0].append(m1)
score[0].append(stream.Measure(note.Note('C4')))

# PP = musicxml.xmlToM21.PartParser()

# sc = stream.Score([stream.Stream(score[0][0:]), stream.Measure(note.Note('C4'))])
score.show('text')
score.show()

score[0][2].getSpannedElementIds()
# %%

measures = [stream.Measure(note.Rest('whole')) for _ in range(4)]
sc = stream.Score(stream.Part(measures))
multirest = spanner.MultiMeasureRest(measures)
# multirest.addSpannedElements([measures])

sc[0].append(multirest)

# sc = stream.Score(stream.Part([multirest] + measures))

print(multirest.numRests)

sc.show('text')
sc.show()

# %%

score[0][2].show('text')

# ===============================  MultiMeasureRest  =================================================
# %%

s1 = stream.Stream([stream.Measure([note.Note('C4', type='whole')]),
                    spanner.MultiMeasureRest([stream.Measure() for _ in range(4)])])

female = stream.Part([clef.TrebleClef(), meter.TimeSignature('2/4'),
                      spanner.MultiMeasureRest([stream.Measure() for _ in range(4)])]) # voices[0], voices[1]])

female.show()

# %%

mmr = spanner.MultiMeasureRest()
for i in range(6):
    mmr.addSpannedElements([note.Rest(type='whole')])
print(mmr.numRests)

mmr.numRests = 10

print(mmr.numRests)

mmr.show('text')
mmr.show()

# %%

PP = musicxml.xmlToM21.PartParser()
mmrSpanner = spanner.MultiMeasureRest()
mmrSpanner
# <music21.spanner.MultiMeasureRest 0 measures>

PP.activeMultiMeasureRestSpanner = mmrSpanner
PP.multiMeasureRestsToCapture = 2
r1 = note.Rest(type='whole', id='r1')
PP.applyMultiMeasureRest(r1)
PP.multiMeasureRestsToCapture
# 1

PP.activeMultiMeasureRestSpanner
# <music21.spanner.MultiMeasureRest 1 measure>

PP.activeMultiMeasureRestSpanner is mmrSpanner
# True

# PP.stream.show('text')
# ... Nothing
r2 = note.Rest(type='whole', id='r2')
PP.applyMultiMeasureRest(r2)
PP.multiMeasureRestsToCapture
# 0

PP.activeMultiMeasureRestSpanner is None
# True

# PP.stream.show('text')
# {0.0} <music21.spanner.MultiMeasureRest 2 measures>

r3 = note.Rest(type='whole', id='r3')
PP.applyMultiMeasureRest(r3)
PP.stream.show('text')
# {0.0} <music21.spanner.MultiMeasureRest 2 measures>

#PP.stream.show()
mmrSpanner.show()

# %%

# {100.0} <music21.stream.Measure 26 offset=100.0>
#     {0.0} <music21.note.Rest whole>
[]
rests = [stream.Measure(note.Rest('whole')), stream.Measure(note.Rest('whole')), stream.Measure(note.Rest('whole'))]
st = stream.Part([stream.Measure([note.Rest('whole')]), spanner.MultiMeasureRest(rests), stream.Measure(note.Note('C4'))])

st.show('text')
st.show()
# %%
# %%
# %%
# %%
# %%
# %% Trying default constructors to return if some semantic error occures, ADD DOUBLE BARLINE

# c = clef.clefFromString('C3')
c = clef.Clef()
t = meter.TimeSignature('5/4')
k = key.Key()
r = note.Rest('whole', fullMeasure=True)

rr = note.Rest('half')
rr.quarterLength = 1.75
rr.expressions.append(expressions.Fermata())
print(r.fullMeasure)
n = note.Note('C4')
f = expressions.Fermata()  # type='upright')  # type='inverted')
f.type = 'upright'

rrr = note.Rest()

# f.placement = 'inverted'

# f._setPlacement('above')
# n.expressions.append(f)
bl = bar.Barline('double')

m = stream.Measure([c, k, t, r])
m.rightBarline = bl

mm = stream.Measure([n, rr, rrr])

print(rr.duration.type)
meas = stream.Stream([m, mm])
meas.show()

print(rrr.duration)
n.expressions

# %% BREVE REST UUAAAA

n = note.Rest()
n.duration = duration.Duration('breve')
# n.type = 'quarter'

met = meter.TimeSignature('7/4')

m = stream.Measure([met, n])
m.show()

print(n.duration)
print(n)



# %%

n = note.Rest()
n.duration = duration.Duration('whole')

nn = note.Note('Abb4')

met = meter.TimeSignature('cut')

m = stream.Measure([met, n, nn])
m.show('text')
m.show()

print(n.duration)
print(n)
print(met)

# %% Key and its alteredPitches 

k = key.Key('A')

n = note.Note('CN3')

m = stream.Measure([k, n])

m.show()

print(n.pitch.name)
print(type(n.pitch))

for pitc in k.alteredPitches:
    print(pitc.name)


dur = duration.Duration('half')

nn = note.Note('A', duration=dur)
nn.show()

# %%
n = note.Note('CN3')
n.stemDirection = 'down'
print(note.stemDirectionNames)

n.show()

# %% Measure number

n = note.Note('CN3', duration=duration.Duration(1.75))
nn = note.Note('A')

# print(nn.print_spacing)

m = stream.Measure([n, nn])
m.number = 10
print(m.showNumber)

s = stream.Stream(m)
s.show('text')

# %%  Example of systemBreak from music21 documentation
# url: https://web.mit.edu/music21/doc/usersGuide/usersGuide_15_key.html

out = stream.Part()
for i in range(0, 8):
    pitchStream = converter.parse("tinyNotation: 4/4 c8 e d f e g f a g e f d c e c4")

    if i != 0:
        # remove redundant clefs and time signature
        trebleClef = pitchStream.recurse().getElementsByClass('Clef')[0]
        fourFour = pitchStream.recurse().getElementsByClass('TimeSignature')[0]

        pitchStream.remove(trebleClef, recurse=True)
        pitchStream.remove(fourFour, recurse=True)

    if i % 2 == 0:
        # add a line break at the beginning of every other line:
        pitchStream.measure(1).insert(0, layout.SystemLayout(isNew=True))

    k = key.Key('C')
    pitchStream.measure(1).insert(0, k)
    k.transpose(i, inPlace=True)
    for n in pitchStream.recurse().notes:
        n.transpose(i, inPlace=True)
    for el in pitchStream:
        out.append(el)

out.show()

# %%  Custom usage of systemBreak using layout module

notes = [
    note.Note('C4'),
    note.Note('e4'),
    note.Note('g4'),
    note.Note('e4'),
]

notes2 = [
    note.Note('a4'),
    note.Note('d4'),
    note.Note('c5'),
    note.Note('d5'),
]

m1 = stream.Measure(notes)
m2 = stream.Measure(notes2)
m2.insert(0, layout.SystemLayout(isNew=True))

s = stream.Stream([m1, m2])

s.show('xml')



# %%
import re
# %% Files with most staves with 3+ voices  (stave ids took out of top 2_000 staves with 3+ voices)

staves = ['4181661_p00_s37.png', '2849781_p00_s09.png', '2849781_p00_s07.png', '1830741_p00a_s04.png', '934616_p00a_s009.png', '6388841_p00a_s05.png', '6382145_p00a_s015.png', '6331872_p00a_s012.png', '6331872_p00a_s011.png', '6307401_p00_s15.png', '6273955_p00a_s028.png', '6255710_p00_s01.png', '6251021_p00_s00.png', '6247842_p00c_s048.png', '6247842_p00a_s015.png', '6214300_p00a_s08.png', '6211562_p00a_s063.png', '6211562_p00a_s042.png', '6211562_p00a_s022.png', '6096990_p02_s48.png', '6086952_p00a_s009.png', '6072785_p00a_s037.png', '6072785_p00a_s036.png', '6068586_p00_s106.png', '6064500_p00_s05.png', '6061177_p00a_s034.png', '6029723_p08_s039.png', '6029723_p08_s033.png', '6029723_p08_s032.png', '6029723_p08_s024.png', '6029723_p06_s054.png', '6029723_p06_s053.png', '6029723_p06_s045.png', '6029723_p06_s044.png', '6029723_p06_s043.png', '6029723_p00a_s051.png', '6029723_p00a_s050.png', '6029723_p00a_s048.png', '6029723_p00a_s047.png', '6029723_p00a_s042.png', '6029723_p00a_s039.png', '6029723_p00a_s038.png', '6029723_p00a_s036.png', '6029723_p00a_s035.png', '6029723_p00a_s033.png', '6029723_p00a_s030.png', '6029723_p00a_s028.png', '6029723_p00a_s024.png', '6029723_p00a_s020.png', '6029723_p00a_s016.png', '6029723_p00a_s013.png', '6029723_p00a_s009.png', '6009345_p00_s017.png', '6009345_p00_s005.png', '6005650_p01_s14.png', '6003330_p00_s01.png', '5939350_p00a_s13.png', '5939350_p00a_s12.png', '5939350_p00a_s06.png', '5939350_p00a_s05.png', '5939350_p00a_s02.png', '5939350_p00a_s01.png', '5846302_p00a_s048.png', '5737410_p00_s21.png', '5737410_p00_s18.png', '5737410_p00_s16.png', '5706372_p01b_s042.png', '5706372_p01b_s038.png', '5706372_p01b_s034.png', '5706372_p01b_s022.png', '5706372_p01b_s020.png', '5706372_p01b_s018.png', '5706372_p01b_s016.png', '5706372_p01b_s014.png', '5706372_p01b_s012.png', '5706372_p01b_s010.png', '5706372_p01b_s008.png', '5706372_p01a_s026.png', '5706372_p01a_s025.png', '5706372_p01a_s024.png', '5706372_p01a_s023.png', '5706372_p00a_s026.png', '5706372_p00a_s025.png', '5706372_p00a_s024.png', '5706372_p00a_s023.png', '5706372_p00a_s005.png', '5706372_p00a_s003.png', '5496498_p01_s033.png', '5496498_p01_s031.png', '5483220_p00_s23.png', '5483220_p00_s22.png', '5483220_p00_s21.png', '5483220_p00_s20.png', '5483220_p00_s19.png', '5483220_p00_s18.png', '5483220_p00_s17.png', '5483220_p00_s11.png', '5483220_p00_s10.png', '5483220_p00_s09.png', '5483220_p00_s08.png', '5483220_p00_s07.png', '5483220_p00_s06.png', '5483220_p00_s05.png', '5477570_p00_s01.png', '5333260_p00_s14.png', '5333260_p00_s13.png', '5333260_p00_s09.png', '5333260_p00_s06.png', '5333260_p00_s05.png', '5326287_p00b_s007.png', '5292620_p01_s02.png', '5292620_p01_s01.png', '5269314_p00a_s011.png', '5242410_p02a_s18.png', '5233190_p01_s04.png', '5144750_p03_s13.png', '5144750_p03_s11.png', '5126520_p00_s03.png', '4586261_p00_s01.png', '4327881_p22_s05.png', '4327881_p22_s02.png', '4327881_p11_s05.png', '4327881_p11_s02.png', '4229601_p00a_s01.png', '4229601_p00_s05.png', '4229601_p00_s04.png', '4229601_p00_s03.png', '4229601_p00_s01.png', '4229601_p00_s00.png', '4181661_p00_s38.png', '4181661_p00_s36.png']

files = {}
for stave in staves:
    file_name = re.split('_', stave)[0]
    if file_name in files:
        files[file_name] += 1
    else:
        files[file_name] = 1

print(len(files))

# sort dictionary by value
sorted_footballers_by_goals = sorted(files.items(), key=lambda x:x[1], reverse=True)
print(sorted_footballers_by_goals)

# RESULT: [('6029723', 26), ('5706372', 21), ('5483220', 14), ('5939350', 6), ('4229601', 6), ('5333260', 5), ('4327881', 4), ('4181661', 3), ('6211562', 3), ('5737410', 3), ('2849781', 2), ('6331872', 2), ('6247842', 2), ('6072785', 2), ('6009345', 2), ('5496498', 2), ('5292620', 2), ('5144750', 2), ('1830741', 1), ('934616', 1), ('6388841', 1), ('6382145', 1), ('6307401', 1), ('6273955', 1), ('6255710', 1), ('6251021', 1), ('6214300', 1), ('6096990', 1), ('6086952', 1), ('6068586', 1), ('6064500', 1), ('6061177', 1), ('6005650', 1), ('6003330', 1), ('5846302', 1), ('5477570', 1), ('5326287', 1), ('5269314', 1), ('5242410', 1), ('5233190', 1), ('5126520', 1), ('4586261', 1)]

# %%

transcriptions = [
    '">2 + kBbM + s3/4 + D5z + E5z + D5z + E5z + D5z + E5z + | + C5z + D5z + C5z + D5z + C5z + D5z + | + B4z + C5z + B4z + C5z + B4z + C5z + | + A4z + G4z + Gb4H + | + rz + rz + D4z + F#4z + D5q + | + D5H. + | + D4q + G4q + B4q + | + D5H + D5q + | + C5q + B4q + A4q + |"',
    '">2 + kBbM + B4H. + | + rq + rz + G4z + B4z + D5z + | + G5H + G5q + | + G5q + A5q + F5z + E5z + | + F5H. + | + rq + rz + A4z + D5z + F5z + | + A5H + G5q + | + F5q + EN5q + F5q + | + G5H + F5q + | + EN5H + D5q + | + C5q + B4q + C5q + |"',
    '">2 + kBbM + D5q + C5q + G4q + | + A4H. + | + A5q + C6q + B5q. + A5q. + | + rq + A5q + C6q + B5q + A5z + G5z + | + Gb5z + E5z + D5H + | + D5q + rH + | + rW + | + rW + | + rq + D4q + G4q + | + B4q + D5H + | + D5q + C5q + B4q + |"',
    '">2 + kBbM + A4q + B4H + | + B4q + G4q + B4q + | + D5q + G5H + | + G5q + G5q + F5q + | + E5q + F5H + | + F5q + A4q + D5q + | + F5q + A5H + | + G5q + F5q + EN5q + | + F5q + G5H + | + F5q + EN5H + | + D5q + D5q + C5z + D5z + |"',
    '">2 + kBbM + C5z + B4z + A4q. + BN4z + | + C#5q + D5H + | + C#5q + D5q + A4q + | + F#4q + rq + F4q + | + G4q + A4q + F#4q + | + D5q + E5H + | + D5q + C5q + B4q + | + A4q + B4q + C5q + | + D5q + F4H + | + F4q + E5H + | + D5q + C5q. + B4z + |"',
    '">2 + kBbM + C5q + D5H + | + D5H. + | + D5q + D5z + E5z + D5z + C#5q + | + D5q + F5q + EN5q + | + D5q + C#5H + | + EN5q + A4H + | + A4q + F5H + | + F5q + F5q + EN5q + | + D5q + EN5H + | + E5q + E5H + | + rq + F#5H + |"',
    '">2 + kBbM + F#5q + F5q + G5q + | + A5q + B5H + | + B5q + G4q + B4q + | + B4q + EN5H + | + EN5q + E5q + F5q + | + G5q + A5H + | + A5q + F4q + A4q + | + A4q + EN5q + D#5q + | + EN5q + G5q + F5q + | + EN5q + D5q + C#5q + | + D5q + EN5H + |"',
    '">2 + kBbM + EN5q + C6H + | + B5q + A5H + | + G5q + F#5H + | + F#5q + D5q + F5z + G5z + F5z + | + C5q + D5q + D5z + E5z + D5z + | + C#5q + D5q + B4z + D5z + B4z + | + A4q + E4q + Ab4q + | + Cb5q + C5q + rq + | + rq + EN4q + A4q + | + C5q + EN5H + |"',
    '">2 + kBbM + EN5q + D5q + C5q + | + BN4q + C5H + | + C5q + A4q + C5q + | + EN5q + A5H + | + A5q + A5q + G5q + | + F5q + G5H + | + G5q + BN4q + EN5q + | + G5q + BN5H + | + A5q + rq + G5z + F#5z + | + EN5z + F#5z + A5H + |"'
]

def curr(start, end, i, n):
    return int(start + ((end - start) / (n-1) * i))

    print(f'start: {start}, end: {end}, i: {i}')
    print((end - start) / (end-1))
    print((end - start) / (end-1) * i)
    print(start + ((end - start) / (end-1) * i))
    

out = ''

n = 9

for i in range(n):    
    y = curr(122, 820, i, n)
    y2 = curr(178, 884, i, n)
    y3 = curr(150, 859, i, n)

    textregion =  f"""
    <TextRegion id="r00{i}">
      <Coords points="25,{y} 25,{y2} 733,{y2} 733,{y} 25,{y}"/>
      <TextLine id="r00{i}-l000" index="0" custom="heights_v2:[22,200]">
        <Coords points="25,{y} 25,{y2} 733,{y2} 733,{y} 25,{y}"/>
        <Baseline points="25,{y3} 733,{y3}"/>
        <TextEquiv conf="0.987">
          <Unicode>{transcriptions[i]}</Unicode>
        </TextEquiv>
      </TextLine>
    </TextRegion>"""
    out += textregion

print(out)

# %%

lines = """011-r000-l000.jpg 000000 ">2 + kBbM + s3/4 + D5z + E5z + D5z + E5z + D5z + E5z + | + C5z + D5z + C5z + D5z + C5z + D5z + | + B4z + C5z + B4z + C5z + B4z + C5z + | + A4z + G4z + Gb4H + | + rz + rz + D4z + F#4z + D5q + | + D5H. + | + D4q + G4q + B4q + | + D5H + D5q + | + C5q + B4q + A4q + |"
011-r001-l000.jpg 000000 ">2 + kBbM + B4H. + | + rq + rz + G4z + B4z + D5z + | + G5H + G5q + | + G5q + A5q + F5z + E5z + | + F5H. + | + rq + rz + A4z + D5z + F5z + | + A5H + G5q + | + F5q + EN5q + F5q + | + G5H + F5q + | + EN5H + D5q + | + C5q + B4q + C5q + |"
011-r002-l000.jpg 000000 ">2 + kBbM + D5q + C5q + G4q + | + A4H. + | + A5q + C6q + B5q. + A5q. + | + rq + A5q + C6q + B5q + A5z + G5z + | + Gb5z + E5z + D5H + | + D5q + rH + | + rW + | + rW + | + rq + D4q + G4q + | + B4q + D5H + | + D5q + C5q + B4q + |"
011-r003-l000.jpg 000000 ">2 + kBbM + A4q + B4H + | + B4q + G4q + B4q + | + D5q + G5H + | + G5q + G5q + F5q + | + E5q + F5H + | + F5q + A4q + D5q + | + F5q + A5H + | + G5q + F5q + EN5q + | + F5q + G5H + | + F5q + EN5H + | + D5q + D5q + C5z + D5z + |"
011-r004-l000.jpg 000000 ">2 + kBbM + C5z + B4z + A4q. + BN4z + | + C#5q + D5H + | + C#5q + D5q + A4q + | + F#4q + rq + F4q + | + G4q + A4q + F#4q + | + D5q + E5H + | + D5q + C5q + B4q + | + A4q + B4q + C5q + | + D5q + F4H + | + F4q + E5H + | + D5q + C5q. + B4z + |"
011-r005-l000.jpg 000000 ">2 + kBbM + C5q + D5H + | + D5H. + | + D5q + D5z + E5z + D5z + C#5q + | + D5q + F5q + EN5q + | + D5q + C#5H + | + EN5q + A4H + | + A4q + F5H + | + F5q + F5q + EN5q + | + D5q + EN5H + | + E5q + E5H + | + rq + F#5H + |"
011-r006-l000.jpg 000000 ">2 + kBbM + F#5q + F5q + G5q + | + A5q + B5H + | + B5q + G4q + B4q + | + B4q + EN5H + | + EN5q + E5q + F5q + | + G5q + A5H + | + A5q + F4q + A4q + | + A4q + EN5q + D#5q + | + EN5q + G5q + F5q + | + EN5q + D5q + C#5q + | + D5q + EN5H + |"
011-r007-l000.jpg 000000 ">2 + kBbM + EN5q + C6H + | + B5q + A5H + | + G5q + F#5H + | + F#5q + D5q + F5z + G5z + F5z + | + C5q + D5q + D5z + E5z + D5z + | + C#5q + D5q + B4z + D5z + B4z + | + A4q + E4q + Ab4q + | + Cb5q + C5q + rq + | + rq + EN4q + A4q + | + C5q + EN5H + |"
011-r008-l000.jpg 000000 ">2 + kBbM + EN5q + D5q + C5q + | + BN4q + C5H + | + C5q + A4q + C5q + | + EN5q + A5H + | + A5q + A5q + G5q + | + F5q + G5H + | + G5q + BN4q + EN5q + | + G5q + BN5H + | + A5q + rq + G5z + F#5z + | + EN5z + F#5z + A5H + |\""""

lines = lines.split('\n')


for line in lines:
    _, _, label = re.split(r'\s+', line, maxsplit=2)
    print(f'\'{label}\',')    

# %%
