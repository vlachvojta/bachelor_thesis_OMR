# User-Guide for music21 library: 
# https://web.mit.edu/music21/doc/usersGuide/usersGuide_99_Table_of_Contents.html
# Install by executing: pip install music21

# %%

import music21 as m21
from music21 import *

def m21_to_MusicXML(music_object):
    GEX = m21.musicxml.m21ToXml.GeneralObjectExporter(music_object)
    out = GEX.parse()  # out is bytes
    outStr = out.decode('utf-8')  # now is string
    return outStr.strip()

# %% 
s1 = m21.stream.Stream()
n = m21.note.Note('c4', type='half')

# n.duration.type = 'half'

s1.append(n)

n = m21.note.Note('f4', type='whole')
# n.duration.type = 'eighth'

s1.append(n)

# s1.show('xml')
s1.show()

print(s1)

# %%

# p = m21.pitch.Pitch('D#4')
# GEX = m21.musicxml.m21ToXml.GeneralObjectExporter(p)

GEX = m21.musicxml.m21ToXml.GeneralObjectExporter(s1)
out = GEX.parse()  # out is bytes
outStr = out.decode('utf-8')  # now is string
print(outStr.strip())


# %% Chord made of three defined notes

cMinor = m21.chord.Chord(["C4","G4","E-5"])
cMinor.duration.type = 'half'
cMinor.show()


# %%  Multi-voice score

n1 = m21.note.Note('f4')
n1.duration.type = 'half'

n2 = m21.note.Note('c4')

multi = m21.voiceLeading.Verticality({0: n1, 1: n2})

multi.show()

# %%

n1 = m21.note.Note('G4')
n2 = m21.note.Note('G4')
m1 = m21.note.Note('G4')
m2 = m21.note.Note('G3')
vl2 = m21.voiceLeading.VoiceLeadingQuartet(n1, n2, m1, m2)
vl2.antiParallelMotion()
vl2.show()


# %% Example of more complex note structure

verdi = m21.corpus.parse('verdi/laDonnaEMobile')
verdi.id = 'verdi'
verdi.measures(1, 10).show()
# %% 
# verdi.measure(3).parts[1].show('musicxml')

print(m21_to_MusicXML(verdi.measure(3).parts[1]))


# %% M21 -> MusicXML -> M21 by convertor.parse

output = m21_to_MusicXML(verdi.measure(3).parts[1])

ss = m21.converter.parse(output)

ss.show()

# %%

# verdi.measure(3).parts[1].show()
# verdi.measure(3).parts[1][4][0][1].show('text')

verdi_p1 = verdi.parts[1].measures(0,10)

verdi_p1.show()

verdi_p1.pop(verdi_p1.measure(0))

verdi_p1.show()

# %%

verdi.measure(3).parts[1][4][0].append(note.Note('c4', type='half'))
verdi.measure(3).parts[1].show('text')




# %% 

double_note = """
<note>
    <rest />
    <duration>5040</duration>
    <voice>1</voice>
    <type>eighth</type>
</note>
<note default-x="19.09" default-y="-214.8">
    <pitch>
        <step>F</step>
        <octave>2</octave>
    </pitch>
    <duration>15120</duration>
    <voice>2</voice>
    <type>quarter</type>
    <dot />
    <stem>down</stem>
</note>
"""

two_voices = converter.parse(double_note, format='musicxml')

two_voices.show()

# %%

s1 = stream.Stream()
vs1 = voiceLeading.Verticality({0: [note.Note('A4')],
                                1: [note.Note('F2')]})

s1.append(vs1)
s1.show()

# %%

n1 = note.Note('E4')
n2 = note.Note('G4')
m1 = note.Note('B4')
m2 = note.Note('D5')
vl = voiceLeading.VoiceLeadingQuartet(n1, n2, m1, m2)

vl.show('text')

# %%

def generateScore(chords, lengths=None, ts="4/4"):
    """Generates a four-part score from a sequence of chords.

    Soprano and alto parts are displayed on the top (treble) clef, while tenor
    and bass parts are displayed on the bottom (bass) clef, with correct stem
    directions.
    """
    if lengths is None:
        lengths = [1 for _ in chords]
    voices = [stream.Voice([instrument.Piano()]) for _ in range(4)]
    for chord, length in zip(chords, lengths):
        bass, tenor, alto, soprano = [
            note.Note(p, quarterLength=length) for p in chord.pitches
        ]
        bass.addLyric(chord.lyric)
        bass.stemDirection = alto.stemDirection = "down"
        tenor.stemDirection = soprano.stemDirection = "up"
        voices[0].append(soprano)
        voices[1].append(alto)
        voices[2].append(tenor)
        voices[3].append(bass)

    female = stream.Part([clef.TrebleClef(), meter.TimeSignature(ts), voices[0], voices[1]])
    male = stream.Part([clef.BassClef(), meter.TimeSignature(ts), voices[2], voices[3]])
    score = stream.Score([female, male])
    return score

generateScore([chord.Chord(["C4","E4","G4", "C5"]), chord.Chord(["D4", "A4", "D5", "F5"])]).show()

# %% Basic example of using voices in score

voice_1 = stream.Voice([note.Note('G4', type='half')])
voice_2 = stream.Voice([note.Note('C4', type='eighth')])

meas = stream.Measure([voice_1, voice_2])
meas2 = stream.Measure(note.Note('F4'))

s1 = stream.Part([meas, meas2])
s1.show()

# %% Another example of using voices in score

'G4h + C4h E4q + A4q'
s1 = stream.Stream(note.Note('G4', type='half'))

# s2 = stream.Stream([stream.Voice(note.Note('C4', type='half'))]) #, stream.Voice(note.Note('E4'))])
s2 = m21.chord.Chord(["C4","G4"])
s3 = stream.Stream()

voice1 = stream.Voice([note.Note('G4', type='half'), s2, note.Note('A4')])
voice2 = stream.Voice([note.Rest(type='half'), note.Note('A3')])

ss = stream.Part([stream.Measure([voice1, voice2]), stream.Measure([note.Note('C3')])])
ss.show()

# Part > Measure > Stream > Voice > Note = Rest

# %% Clef, Gracenote, keySignature, Note, rest, ~~multirest~~

n1 = note.Note('C4')
n2 = note.Note('E4')

c2 = clef.NoClef()

d = note.Note('C4', type='eighth').getGrace()
dGrace = d.getGrace()
# m.insert(2.0, dGrace)
# m.show()

k = key.Key('C#M')

meas = stream.Measure([k, clef.BassClef(), n1, dGrace, n2])
meas2 = stream.Measure([key.Key('DM'), note.Note('G4', type='half')])
measures = [meas, meas2]

meas3 = stream.Stream([stream.Measure(note.Rest('whole'))  for _ in range(5)])
measures += meas3

str1 = stream.Stream(measures)
str1.show()

# %% Tie, timeSignature

c0 = note.Note('C4')
c0.tie = tie.Tie('start')
# c1 = note.Note('C4')
# c1.tie = tie.Tie('continue')
c2 = note.Note('C4')
c2.tie = tie.Tie('stop')
s = stream.Measure()
# s.append([c0, c1, c2])
#s.append([c0, c2])
meas = stream.Measure([meter.TimeSignature(''), c0, c2])
meas.show()


# %%
import os


# ===============================  MultiMeasureRest  =================================================
# %% Loading score with existing Multirest
path = '../../datasets/in_progress/reverse-converter-TDD/musescore_examples/'

file = os.path.join(path, 'Multirest-trying_with_multirest.musicxml')
# 'Multirest-trying_with_multirest.musicxml'
# 'Multirest-trying_without_multirest.musicxml'

score = m21.converter.parse(file)

for i in range(2):
    score.__delitem__(0)

for i in range(2):
    score.__delitem__(-1)
score[0].show('text')
score[0].show()
# %%

for _ in range(21):
    score[0].__delitem__(3)

score[0].__delitem__(-1)

score[0].__delitem__(1)
score[0].__delitem__(0)
# score[0].show('text')
# score[0].show()
type(score[0])

mmr = score[0][0]
print(mmr.numRests)
m1 = stream.Measure(note.Rest('whole'), number=28)
mmr.addSpannedElements(m1)


score[0].append(m1)
score[0].append(stream.Measure(note.Note('C4')))

# PP = musicxml.xmlToM21.PartParser()

# sc = stream.Score([stream.Stream(score[0][0:]), stream.Measure(note.Note('C4'))])
score.show('text')
score.show()
# %%

measures = [stream.Measure(note.Rest('whole')) for _ in range(4)]
multirest = spanner.MultiMeasureRest(measures)
multirest.addSpannedElements([note.Rest(type='whole')])
sc = stream.Score(stream.Part([multirest] + measures))

print(multirest.numRests)

sc.show('text')
sc.show()

# %%

score[0][2].show('text')

# ===============================  MultiMeasureRest  =================================================
# %%

s1 = stream.Stream([stream.Measure([note.Note('C4', type='whole')]),
                    spanner.MultiMeasureRest([stream.Measure() for _ in range(4)])])

female = stream.Part([clef.TrebleClef(), meter.TimeSignature('2/4'),
                      spanner.MultiMeasureRest([stream.Measure() for _ in range(4)])]) # voices[0], voices[1]])

female.show()

# %%

mmr = spanner.MultiMeasureRest()
for i in range(6):
    mmr.addSpannedElements([note.Rest(type='whole')])
print(mmr.numRests)

mmr.numRests = 10

print(mmr.numRests)

mmr.show('text')
mmr.show()

# %%

PP = musicxml.xmlToM21.PartParser()
mmrSpanner = spanner.MultiMeasureRest()
mmrSpanner
# <music21.spanner.MultiMeasureRest 0 measures>

PP.activeMultiMeasureRestSpanner = mmrSpanner
PP.multiMeasureRestsToCapture = 2
r1 = note.Rest(type='whole', id='r1')
PP.applyMultiMeasureRest(r1)
PP.multiMeasureRestsToCapture
# 1

PP.activeMultiMeasureRestSpanner
# <music21.spanner.MultiMeasureRest 1 measure>

PP.activeMultiMeasureRestSpanner is mmrSpanner
# True

# PP.stream.show('text')
# ... Nothing
r2 = note.Rest(type='whole', id='r2')
PP.applyMultiMeasureRest(r2)
PP.multiMeasureRestsToCapture
# 0

PP.activeMultiMeasureRestSpanner is None
# True

# PP.stream.show('text')
# {0.0} <music21.spanner.MultiMeasureRest 2 measures>

r3 = note.Rest(type='whole', id='r3')
PP.applyMultiMeasureRest(r3)
PP.stream.show('text')
# {0.0} <music21.spanner.MultiMeasureRest 2 measures>

#PP.stream.show()
mmrSpanner.show()

# %%

# {100.0} <music21.stream.Measure 26 offset=100.0>
#     {0.0} <music21.note.Rest whole>
[]
rests = [stream.Measure(note.Rest('whole')), stream.Measure(note.Rest('whole')), stream.Measure(note.Rest('whole'))]
st = stream.Part([stream.Measure([note.Rest('whole')]), spanner.MultiMeasureRest(rests), stream.Measure(note.Note('C4'))])

st.show('text')
st.show()
# %%
# %%
# %%
# %%
# %%
# %%
